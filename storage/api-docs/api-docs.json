{
    "openapi": "3.0.0",
    "info": {
        "title": "Kanban API",
        "description": "Backend API for Kanban App â€” RESTful service managing users, boards, tasks, and authentication for daily task management.",
        "version": "1.0.0"
    },
    "paths": {
        "/api/subtasks/{subtask}/toggle-completion": {
            "patch": {
                "tags": [
                    "Subtasks"
                ],
                "summary": "Toggles the completion status of a subtask",
                "description": "Inverts the current completion status (completed/incomplete) of a subtask",
                "operationId": "toggleSubtaskCompletion",
                "parameters": [
                    {
                        "name": "subtask",
                        "in": "path",
                        "description": "Subtask ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status changed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Subtask completion toggled successfully!"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Subtask"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Subtask not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No query results for model [App\\\\Models\\\\Subtask] 5"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error while switching status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "operationId": "dd81e4a33302f115faf4b800073cf3bc",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Jon Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "jon@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "minLength": 8,
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User registered successfully!"
                                        },
                                        "token": {
                                            "type": "string",
                                            "example": "1|Xn9r5..."
                                        },
                                        "user": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "Jon Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "jon@example.com"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation failed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The email field is required."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Authenticates a user (returns Sanctum token)",
                "operationId": "0901e75ef9dca59482720e44aa368f8c",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "jon@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "type": "string",
                                            "example": "1|Xn9r5..."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "The provided credentials are incorrect.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "object",
                                            "example": {
                                                "email": [
                                                    "The provided credentials are incorrect."
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Revokes the current access token",
                "operationId": "31c9fb392682e748e896d60ffb96b352",
                "responses": {
                    "200": {
                        "description": "Logout successful!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logout successful!"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/boards": {
            "get": {
                "tags": [
                    "Boards"
                ],
                "summary": "List all user boards",
                "operationId": "227c01abddadd7888c2c1d34f3997825",
                "responses": {
                    "200": {
                        "description": "Boards list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "boards": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Board"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - User doesn't have permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Boards"
                ],
                "summary": "Create board with columns",
                "description": "Creates a new board with initial columns",
                "operationId": "createBoard",
                "requestBody": {
                    "description": "Board data with columns",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "columns"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "My Board"
                                    },
                                    "columns": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "example": "To Do"
                                                },
                                                "order": {
                                                    "type": "integer",
                                                    "example": 1
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Board created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/SuccessResponse"
                                        },
                                        {
                                            "properties": {
                                                "data": {
                                                    "properties": {
                                                        "board": {
                                                            "$ref": "#/components/schemas/Board"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/schemas/ValidationErrorResponse"
                    },
                    "500": {
                        "description": "Failed to create",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/boards/{id}": {
            "get": {
                "tags": [
                    "Boards"
                ],
                "summary": "Get board details",
                "description": "Retrieves full details of a specific board including columns, tasks and subtasks",
                "operationId": "getBoardById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the board",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Board data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "board": {
                                                    "$ref": "#/components/schemas/Board"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - User doesn't have permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Board not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Board not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Boards"
                ],
                "summary": "Update an existing board",
                "operationId": "fc16ee0cead1b4b38347f1e5c8a5b762",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated board"
                                    },
                                    "is_active": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "columns": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "To Do"
                                                },
                                                "order": {
                                                    "type": "integer",
                                                    "example": 1
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Board updated successfully!"
                                        },
                                        "data": {
                                            "properties": {
                                                "board": {
                                                    "$ref": "#/components/schemas/Board"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Board not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/schemas/ValidationErrorResponse"
                    },
                    "500": {
                        "description": "Failed to update",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Boards"
                ],
                "summary": "Delete a board",
                "operationId": "705e5162a408261cdf187f22fa950a8c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Deleted!"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/schemas/ValidationErrorResponse"
                    },
                    "500": {
                        "description": "Failed to delete",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/boards/active": {
            "get": {
                "tags": [
                    "Boards"
                ],
                "summary": "Get the active board",
                "operationId": "59ce83f30f5f198107130d534f4d8131",
                "responses": {
                    "200": {
                        "description": "Active board",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "board": {
                                                    "$ref": "#/components/schemas/Board"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No active boards found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/schemas/ValidationErrorResponse"
                    },
                    "500": {
                        "description": "Failed to retrieve",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/boards/{id}/activate": {
            "patch": {
                "tags": [
                    "Boards"
                ],
                "summary": "Set board as active",
                "operationId": "770c293132a74ad055f88d50b4d58b6f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Activated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Board set as active."
                                        },
                                        "data": {
                                            "properties": {
                                                "board": {
                                                    "$ref": "#/components/schemas/Board"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not have permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Board not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/schemas/ValidationErrorResponse"
                    },
                    "500": {
                        "description": "Failed to set active",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/tags": {
            "get": {
                "tags": [
                    "Tags"
                ],
                "summary": "List all user tags",
                "operationId": "703df6561d136fa8ae2cbe9d024036d8",
                "responses": {
                    "200": {
                        "description": "Tags list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Tag"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error fetching tags",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tags"
                ],
                "summary": "Creates a new tag",
                "operationId": "7783875d4b96f9e8cca434adb0b47eb3",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "color"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Urgent"
                                    },
                                    "color": {
                                        "type": "string",
                                        "example": "#FF0000"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tag created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tag created successfully!"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Tag"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden â€“ User does not have permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error creating tag",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/tasks/{task}/tags/{tag}": {
            "post": {
                "tags": [
                    "Tags"
                ],
                "summary": "Attach tag to task",
                "operationId": "ad047a242e15f64cce5538c244354db8",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag attached to task successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tag attached to task successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Tag"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden â€“ User does not have permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error attaching task",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tag not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No query results for model [App\\\\Models\\\\Tag] 5"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tags"
                ],
                "summary": "Detach tag from task",
                "operationId": "ac3ca1144ddb69b6a0edbabdf077ac95",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag detached from task successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tag detached from task successfully!"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden â€“ User does not have permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error detaching task",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tag not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No query results for model [App\\\\Models\\\\Tag] 5"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/tags/{tag}": {
            "put": {
                "tags": [
                    "Tags"
                ],
                "summary": "Updates a tag",
                "operationId": "27a40d095d019eca2a98c3a8345c1abf",
                "parameters": [
                    {
                        "name": "tag",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Urgent"
                                    },
                                    "color": {
                                        "type": "string",
                                        "example": "#FF0000"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tag updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tag updated successfully!"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Tag"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden â€“ User does not have permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error updating tag",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tag not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No query results for model [App\\\\Models\\\\Tag] 5"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tags"
                ],
                "summary": "Deletes a tag",
                "operationId": "1cc2a177e6d9b56cba6feec94491a6ab",
                "parameters": [
                    {
                        "name": "tag",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tag deleted successfully!"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden â€“ User does not have permission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error deleting tag",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tag not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No query results for model [App\\\\Models\\\\Tag] 5"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "LoginRequest": {
                "title": "Login Request",
                "description": "Payload used for authenticating a user with email and password.",
                "required": [
                    "email",
                    "password"
                ],
                "properties": {
                    "email": {
                        "description": "User's email address.",
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                    },
                    "password": {
                        "description": "User's password.",
                        "type": "string",
                        "format": "password",
                        "example": "securePassword123"
                    }
                },
                "type": "object"
            },
            "RegisterRequest": {
                "title": "Register Request",
                "description": "Payload used to register a new user.",
                "required": [
                    "name",
                    "email",
                    "password"
                ],
                "properties": {
                    "name": {
                        "description": "Full name of the user.",
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "email": {
                        "description": "Valid email address. Must be unique.",
                        "type": "string",
                        "format": "email",
                        "example": "jane.doe@example.com"
                    },
                    "password": {
                        "description": "Password for the new account.",
                        "type": "string",
                        "format": "password",
                        "example": "MySecurePassword123"
                    }
                },
                "type": "object"
            },
            "StoreBoardRequest": {
                "title": "Board Creation Request",
                "description": "Payload used to create a new board, optionally including initial columns.",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the board to be created. Must be between 3 and 50 characters.",
                        "type": "string",
                        "example": "New Development Board"
                    },
                    "columns": {
                        "description": "(Optional) List of columns to be created along with the board.",
                        "type": "array",
                        "items": {
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "name": {
                                    "description": "Name of the column. Must be between 3 and 50 characters.",
                                    "type": "string",
                                    "example": "To Do"
                                },
                                "order": {
                                    "description": "(Optional) Display order of the column.",
                                    "type": "integer",
                                    "example": 1
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "StoreSubtaskRequest": {
                "title": "Subtask Creation Request",
                "description": "Payload used to create a new subtask associated with an existing task.",
                "required": [
                    "name",
                    "task_id"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the subtask. Must be between 3 and 255 characters.",
                        "type": "string",
                        "example": "Write unit tests"
                    },
                    "task_id": {
                        "description": "ID of the task that this subtask belongs to. Must exist in the database.",
                        "type": "integer",
                        "format": "int64",
                        "example": 42
                    }
                },
                "type": "object"
            },
            "StoreTagRequest": {
                "title": "Tag Creation Request",
                "description": "Payload used to create a new tag.",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the tag. Must be between 3 and 255 characters.",
                        "type": "string",
                        "example": "Urgent"
                    },
                    "color": {
                        "description": "Optional color for the tag, as a string (e.g., hex code or color name). Must be between 3 and 255 characters.",
                        "type": "string",
                        "example": "#FF0000",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "StoreTaskRequest": {
                "title": "Task Creation Request",
                "description": "Payload to create a new task with optional subtasks and tags.",
                "required": [
                    "name",
                    "column_id"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the task. Must be between 3 and 255 characters.",
                        "type": "string",
                        "example": "Implement authentication"
                    },
                    "description": {
                        "description": "Optional short description of the task.",
                        "type": "string",
                        "example": "Add login and registration functionality.",
                        "nullable": true
                    },
                    "column_id": {
                        "description": "ID of the column where this task belongs. Must belong to the authenticated user's board.",
                        "type": "integer",
                        "example": 5
                    },
                    "due_date": {
                        "description": "Optional due date for the task in YYYY-MM-DD format.",
                        "type": "string",
                        "format": "date",
                        "example": "2025-08-15",
                        "nullable": true
                    },
                    "subtasks": {
                        "description": "Optional list of subtasks for this task.",
                        "type": "array",
                        "items": {
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "name": {
                                    "description": "Name of the subtask.",
                                    "type": "string",
                                    "example": "Create login page"
                                },
                                "is_completed": {
                                    "description": "Subtask completion status.",
                                    "type": "boolean",
                                    "example": false
                                }
                            },
                            "type": "object"
                        }
                    },
                    "tags": {
                        "description": "Optional list of tag IDs to associate with this task.",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 2
                        }
                    }
                },
                "type": "object"
            },
            "UpdateBoardRequest": {
                "title": "Board Update Request",
                "description": "Payload to update an existing board, optionally including columns.",
                "properties": {
                    "name": {
                        "description": "New name of the board (optional). Must be between 3 and 50 characters and unique per user.",
                        "type": "string",
                        "example": "Updated Development Board"
                    },
                    "is_active": {
                        "description": "Flag to set the board as active or inactive.",
                        "type": "boolean",
                        "example": true
                    },
                    "columns": {
                        "description": "List of columns to update or add in the board.",
                        "type": "array",
                        "items": {
                            "properties": {
                                "uuid": {
                                    "description": "UUID of the column to update. Omit for new columns.",
                                    "type": "string",
                                    "example": "a3f1e4c2-7b3d-4f57-9e23-12d4b1a3c456"
                                },
                                "name": {
                                    "description": "Name of the column. Required if columns property is present.",
                                    "type": "string",
                                    "example": "In Progress"
                                },
                                "order": {
                                    "description": "Order of the column in the board. Lower values appear first.",
                                    "type": "integer",
                                    "example": 2
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "UpdateSubtaskRequest": {
                "title": "Subtask Update Request",
                "description": "Payload to update an existing subtask.",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the subtask. Must be unique within the parent task.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Write unit tests"
                    },
                    "is_completed": {
                        "description": "Completion status of the subtask.",
                        "type": "boolean",
                        "example": false,
                        "nullable": true
                    },
                    "order": {
                        "description": "Ordering index of the subtask relative to siblings.",
                        "type": "integer",
                        "example": 1,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "UpdateTagRequest": {
                "title": "Tag Update Request",
                "description": "Payload to update an existing tag.",
                "required": [
                    "name",
                    "color"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the tag. Must be unique.",
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 3,
                        "example": "Urgent"
                    },
                    "color": {
                        "description": "Color associated with the tag. Must be unique.",
                        "type": "string",
                        "maxLength": 255,
                        "minLength": 3,
                        "example": "#FF0000"
                    }
                },
                "type": "object"
            },
            "UpdateTaskRequest": {
                "title": "Task Update Request",
                "description": "Payload for updating an existing task with optional fields and nested subtasks and tags.",
                "properties": {
                    "column_id": {
                        "description": "ID of the column where the task belongs. Must be valid and belong to the authenticated user.",
                        "type": "integer",
                        "example": 3
                    },
                    "name": {
                        "description": "Name of the task, unique per column.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Implement login feature"
                    },
                    "description": {
                        "description": "Optional description for the task.",
                        "type": "string",
                        "maxLength": 500,
                        "example": "Detailed description about the login feature implementation.",
                        "nullable": true
                    },
                    "order": {
                        "description": "Position order of the task in the column. Minimum value is 0.",
                        "type": "integer",
                        "example": 1,
                        "nullable": true
                    },
                    "due_date": {
                        "description": "Due date for the task in ISO 8601 format.",
                        "type": "string",
                        "format": "date",
                        "example": "2025-08-15",
                        "nullable": true
                    },
                    "subtasks": {
                        "description": "Optional list of subtasks belonging to the task.",
                        "type": "array",
                        "items": {
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "name": {
                                    "description": "Name of the subtask, unique within the task.",
                                    "type": "string",
                                    "maxLength": 255,
                                    "example": "Create UI for login"
                                },
                                "is_completed": {
                                    "description": "Subtask completion status.",
                                    "type": "boolean",
                                    "example": false,
                                    "nullable": true
                                }
                            },
                            "type": "object"
                        }
                    },
                    "tags": {
                        "description": "Optional list of tag IDs to associate with the task.",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 5
                        }
                    }
                },
                "type": "object"
            },
            "Board": {
                "title": "Board",
                "description": "Represents a board, including its columns and archived status.",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the board.",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the board. Must be unique per user.",
                        "type": "string",
                        "example": "My Project Board"
                    },
                    "is_archived": {
                        "description": "Indicates whether the board is archived (true) or active (false).",
                        "type": "boolean",
                        "example": false
                    },
                    "columns": {
                        "description": "List of columns that belong to this board.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Column"
                        }
                    }
                },
                "type": "object"
            },
            "Column": {
                "required": [
                    "name",
                    "order"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "To Do"
                    },
                    "order": {
                        "type": "integer",
                        "example": 1
                    },
                    "tasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Task"
                        }
                    }
                },
                "type": "object"
            },
            "Task": {
                "required": [
                    "name",
                    "column_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Task Name"
                    },
                    "description": {
                        "type": "string",
                        "example": "Task description"
                    },
                    "column_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "order": {
                        "type": "integer",
                        "example": 0
                    },
                    "due_date": {
                        "description": "Due date and time of the task",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-12-31T23:59:59Z",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "subtasks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Subtask"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    }
                },
                "type": "object"
            },
            "Subtask": {
                "required": [
                    "name",
                    "task_id",
                    "is_completed"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Subtask example"
                    },
                    "task_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "is_completed": {
                        "type": "boolean",
                        "example": false
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Tag": {
                "required": [
                    "name",
                    "color",
                    "user_id"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Urgent"
                    },
                    "color": {
                        "type": "string",
                        "example": "#FF0000"
                    },
                    "user_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "ErrorResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": false
                    },
                    "message": {
                        "type": "string",
                        "example": "An error occurred"
                    },
                    "error": {
                        "type": "string",
                        "example": "Error details"
                    }
                },
                "type": "object"
            },
            "SuccessResponse": {
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "message": {
                        "type": "string",
                        "example": "Operation successful"
                    },
                    "data": {
                        "description": "Response data",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ValidationErrorResponse": {
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "The given data was invalid."
                    },
                    "errors": {
                        "properties": {
                            "new_column_id": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "The selected new_column_id is invalid."
                                }
                            },
                            "new_order": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "The new_order must be at least 0."
                                }
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "NotFoundError": {
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "No query results for model [App\\\\Models\\\\Tag] 5"
                    },
                    "exception": {
                        "type": "string",
                        "example": "Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\NotFoundHttpException"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "sanctum": {
                "type": "apiKey",
                "description": "Enter token in format: Bearer {token}",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Subtasks",
            "description": "Operations related to subtasks"
        },
        {
            "name": "Authentication",
            "description": "Endpoints for registration, login, and authentication management via Sanctum"
        },
        {
            "name": "Boards",
            "description": "Board-related operations"
        },
        {
            "name": "Tags",
            "description": "Tag-related operations"
        }
    ],
    "security": [
        {
            "sanctum": []
        }
    ]
}